#!/bin/bash
# Copyright (C) 1999-2007  IMSEC GmbH
# Copyright (C) 2004-2007  Logintas AG
#
# This file is part of ISiBackup.
#
#    ISiBackup is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    ISiBackup is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

PROGRAM_IDENT="showbackupsizes"
PROGRAM_VERSION="1.6.0~devel"
COPYRIGHT="\
Copyright (C) 1999-2007  IMSEC GmbH
Copyright (C) 2004-2007  Logintas AG"
LIABILITY="This program comes with NO WARRANTY, to the extent permitted by law."
AUTHORS="Written by Marcus Holthaus, Simon Huerlimann and Adrian Friedli."

PATH_LIB="/usr/lib/libisi"
source "$PATH_LIB/lib_help.sh"

PATH_CONF=/etc/isibackup
ISIBACKUP_CONF=isibackup.conf
source "${PATH_CONF}/${ISIBACKUP_CONF}"

lDelay=0

lHostListFile=${PATH_CONF}/${BACKED_UP_HOSTS}
lHostList="$(cat $lHostListFile)"
lDiffDate="$(date -d yesterday +%Y-%m-%d)"

showhostbackupsize () {
  local lHost="$1"
  local lUser="$2"
  local lBackupHost="$3"
  sleep $lDelay
  lHostName="$(echo $lHost | cut -f 1 -d '.')"
  lHostNameShow="$(echo "${lHostName}               " | cut -c 1-15)"
  echo -n "$lHostNameShow "
  lBackupHostName="$(echo $lBackupHost | cut -f 1 -d '.')"
  lBackupHostNameShow="$(echo "${lBackupHostName}               " | cut -c 1-15)"
  echo -n "$lBackupHostNameShow "
  lFullSize=$(ssh ${lUser}@${lBackupHost} "du -s ${BACKUP_ROOT}*/full/*/${lHostName}*" 2>&1 | cut -f 1 -d $'\t')
  if [ ! -z "$(echo "$lFullSize" | grep ssh)" -o ! -z "$(echo "$lFullSize" | grep du)" -o -z "$lFullSize" ] ; then
    echo -n "abort: can't determine full backup size"
  else
    lFullSizeShow="$(echo "$lFullSize            " | cut -c 1-12)"
    echo -n "$lFullSizeShow "
    lDiffSize=$(ssh ${lUser}@${lBackupHost} "du -s ${BACKUP_ROOT}*/diff/*/${lDiffDate}*/${lHostName}*" 2>&1 | cut -f 1 -d $'\t' )
#    lDiffSize=$(ssh ${lUser}@${lBackupHost} "du -s ${BACKUP_ROOT}*/diff/${lDiffDate}*" 2>&1 | cut -f 1 -d $'\t')
    if [ ! -z "$(echo "$lDiffSize" | grep ssh)" -o ! -z "$(echo "$lDiffSize" | grep du)" -o -z "$lDiffSize" ] ; then
      echo -n "abort: can't determine diff backup size"
    else
      lDiffSizeShow="$(echo "$lDiffSize                    " | cut -c 1-18)"
      echo -n "$lDiffSizeShow "
      lRatio=$(( lDiffSize *100 / $lFullSize ))
      lRatioShow="$(echo "$lRatio\%     " | cut -c 1-5)"
      echo -n "$lRatioShow "
      lRestSizeShow="$(ssh ${lUser}@${lBackupHost} "df ${BACKUP_ROOT} | tail -1 | cut -c 42-")"
      echo -n $lRestSizeShow
    fi
  fi
  echo
  sleep $lDelay
}

do_show () { 
  echo "Backup Sizes on individual hosts"
  echo "Backup of Host  on Host         Full         Diff of $lDiffDate Ratio Available Use% Mounted On"
  if [ ! -z "$1" ] ; then lDiffDate=$1 ; fi
  lDelay=0
  for lHost in $lHostList ; do
    showhostbackupsize $lHost $BACKED_UP_HOST_USER $lHost
    showhostbackupsize $lHost $BACKUP_HOST_USER $BACKUP_HOST
  done
  echo "Calling $0 on ${BACKUP_HOST}"
  ssh ${BACKUP_HOST_USER}@${BACKUP_HOST} "/usr/local/bin/showbackupsizes $lDiffDate"
}

function do_help () {
    echo "'$PROGRAM_IDENT' shows the sizes of created backups on then backed up hosts and on the backup host"
    echo 
    echo "Usage: $PROGRAM_IDENT [OPTIONS].."
    echo 
    do_help_common_commands
    echo 
    do_help_common_options
    echo
    echo "Report bugs to bugs@isibackup.org"

}

lCmd="SHOW"

lArgs=$(getopt -o hvVw -l debug,help,verbose,version -n "$PROGRAM_IDENT" -- $*)
eval set -- ${lArgs}

while true ; do
    case "$1" in
        -h|--help) lCmd="HELP"; shift ;;
        -v|--verbose) LOG_LEVEL=$LOG_VERBOSE; shift ;;
        -V|--version) lCmd="VERSION"; shift ;;
        -w|--debug) LOG_LEVEL=$LOG_ALL;  shift ;;
        --) shift ; break ;;
        *)  echo "[ERROR] the commandline parsing failed!";  echo "'$@'";  exit 1 ;;
    esac
done
case $lCmd in
    SHOW) do_show ;;
    HELP) do_help ;;
    VERSION) do_version ;;
esac


