<?xml version="1.0"?><article><articleinfo><title>ProJects/IsiBackup</title></articleinfo><para/><section><title>ISiBackup</title><itemizedlist><listitem>Dies ist die Projektseite für ISiBackup. Hier werden alle Informationen zum Programm ISiBackup festgehalten - Entwicklung, Nutzung, Testverfahren etc.  </listitem><listitem><para>In der Management-Wiki besteht eine Seite zur <ulink url='/InterWiki'>Nutzung von ISiBackup bei Logintas</ulink>. </para></listitem><listitem>Die nachfolgenden Inhalte sind nicht unbedingt alle schon implementiert - sie stellen ein Soll dar und sind daher ein zum Teil eine Spezifikation und zum Teil Wunschdenken. Der Changelog gibt Auskunft über die tatsächlich implementierten Inhalte. </listitem></itemizedlist><para/></section><section><title>Programmdokumentation</title><itemizedlist><listitem>Die Dokumentation von ISiBackup wurde auf Englisch erstellt für eine inzwischen veraltete Version. Sie muss nachgeführt werden - einmalig für die inzwischen aufgenommenen Funktionen, und dann bei jeder Programmänderung. </listitem><listitem>Alle neuen Features werden hier dokumentiert bis sie in die Programmdokumentation aufgenommen wurden - danach werden sie hier entfernt. Daher sind die nachfolgenden Zeilen teilweise in englisch: sowohl die ISIBackup Doku ist englisch, als auch die Management-Wiki. </listitem></itemizedlist><para/></section><section><title>Main Features</title><itemizedlist><listitem>ISiBackup creates collected, compressed, encrypted backups of arbritrary source directory trees. </listitem><listitem>Backup content is divided in <itemizedlist><listitem>Data (Content, Information, Source Codes, Mails, Documentation, etc.) </listitem><listitem><para>System Configuration (more or less content of <code>/etc</code> and some more) </para></listitem><listitem>System Files (the rest) </listitem></itemizedlist></listitem><listitem>In the default configuration, there are monthly full backups and daily differential and incremental backups.  </listitem><listitem><para>It uses the the setting <code>--set data</code>, <code>--set config</code>, or <code>--set system</code>. </para></listitem><listitem>Using all three sets makes sure everything from a system gets stored on a second disk from where one can quickly reinstall the system and recover configuration and content. </listitem></itemizedlist><para/></section><section><title>What to backup</title><para/><section><title>Linux Backups</title><itemizedlist><listitem>isibackup has been invented on debian linux and can be installed using a preconfigured debian package.  </listitem><listitem>It can be used on all unix-like systems, although it might be necessary to install it by hand. </listitem><listitem>The object of all backup are files! </listitem></itemizedlist><para/></section><section><title>Database Backups</title><itemizedlist><listitem>Databases should not be backed up directly. Database Management Systems (DBMS) like MySQL or PostGresQL usually keep lots of information in memory while running, so file content need not to reflect the current data content. Furthermore, they may use internal formats with coding or even crypting which prevent restoring a working database from saved versions of these files. </listitem><listitem>For database backups, there are two well-accepted methods: <itemizedlist><listitem>Online-Backup, which prevents updates to the database parts being backed up while the database is running. This allows for full use of the database during backup progress, but is a bit complicated to implement and creates database-specific backup files which can only be read with specific tools. </listitem><listitem><para>Offline-Backup, which stops the DBMS (that is, makes sure it completes all running transactions and then does not start any new ones until the backup is over), and dumps all backup content to a file using <code>SQL INSERT</code> statements. So, the file resulting from that database dump is in ASCII format and allows for the re-creation of the database from the status when it was backed up. </para></listitem></itemizedlist></listitem><listitem>ISiBackup currently supports Offline-Backups. Online backups would need configuration of the DMBS itself. </listitem><listitem>Doing the database dump is implemented in ISiBackup using drop-in scripts for MySQL and PostGreSQL DMBS. The individual backup configuration also needs information on which user to use for the backup, the password for that user, and the tables to backup.  </listitem><listitem><para>To complete that, the ISiBackup set <code>data</code> has a file exclusions for the raw database files. </para></listitem><listitem>As a database dump may create a HUGE file - usually, a dump file is much larger than the raw database file. This space would be necessary on the temporary directory isibackup uses. To prevent that, the dump is directly pasted into gpg and bzip2, currently (but not intentionally!) ignoring other settings for compression and encryption. </listitem><listitem>Some DMBS use intensive logging, which they could use internally for transaction rollback. These rollback files are not backed up currently. </listitem><listitem>We want to backup the normal query logs, which must be configured in the DBMS configuration. </listitem></itemizedlist><para/></section><section><title>Windows Host Backups</title><para>ISi<emphasis role='strong'/>Backup does not run on Windows (not that we know of: it might run in cygwin). Backing up a Windows Host is therefore done by </para><itemizedlist><listitem>giving access to what should be backed up as a windows share. This limits it to the access range of one individual user. In each case, this prevents backing up registry and system files. </listitem><listitem>Using a windows backup tool and writing the resulting file into a backup share on some system where it is either backed up again by isibackup on that system or where it is declared to be the windows system's backup </listitem><listitem>Temporarily starting the host to be backed up with Linux (Knoppix, or full blown) and then using the linux environment to backup the mounted VFAT or NTFS drive (including registry and system files). </listitem></itemizedlist><para/></section></section><section><title>Backup Modes</title><para/><section><title>Full mode</title><itemizedlist><listitem>Full backups backup all of the selected files. </listitem><listitem>The target directory path usually does not contain a date element, so that subsequential backups are stored in the same location. This speeds up backup creation. </listitem><listitem>It is possible to add a date, or even a date and time element to the full backup path. In this case, each backup run will create a full backup in the indicated place. </listitem></itemizedlist><para/></section><section><title>Diff mode</title><itemizedlist><listitem>Differential backups backup all of the selected files if they have changed since the last full backup.  </listitem><listitem>Having the latest full and the lastest differential backup suffices to completely restore the full set of files. </listitem><listitem>Differential backups should be executed much more frequently than full backups. In "normal" environments, where users edit and add files to the source tree, the differential backup grows day by day, and reaches it maximum size just before the next full backup is executed.  </listitem><listitem>To determine where the starting point for the differential backup is, isibackup references the stamp file created by the full backup, which contains date (and, as of version 1.5, time) when the last successful full backup was started. </listitem><listitem>The differential backup target path normally includes a date element. This allows for daily differential backups, and speeds up backup creation if a differential backup was executed the same day.  </listitem><listitem>The differential backup target path could include a time element. This allows for more many daily differential backups (up to 1 per minute, which is shorter than one isibackup run). </listitem></itemizedlist><para/></section><section><title>Incr mode</title><itemizedlist><listitem>Incremental backups backup all of the selected files if they have changes since the last incremental backup. </listitem><listitem><para>Having the latest full backup and <emphasis role='strong'>all of</emphasis> the incremental backups since then suffices to completely restore the full set of files. </para></listitem><listitem>Incremental backups can be executed much more frequently than full backups. In "normal" environments, where users edit and add files to the source tree, the size of each incremental backup reflects the size of the edited and added files for any period. </listitem><listitem>* To determine where the starting point for the incremental backup is, isibackup references the stamp file created by the previous incremental backup, or by the last full backup, if that is newer. Any of these files contain date and time when the last successful incremental or full backup was started, and hence, to which date the incremental backup must refer. </listitem><listitem>The differential backup target path normally includes only a date element. This allows for daily incremental backups. However: If an incremental backup is executed more than once a day, and the target path remains the same (i.e. does have the same date as a component), then a newer backup would overwrite an older one, and all incremental backup information from the same day would be lost except for the last backup. To prevent that, isibackup does not reference the date of the previous incremental backup, but that of the last incremental backup which was not executed today. So an incremental backup always refers to a backup created at least one day before (to be exact: on the day before the current date). </listitem><listitem>The above mechanism does not work correctly if the backup target path contains a time element. In this case, each incremental backup is indeed an individual backup, as - due to the isibackup execution time, two backups in the same minute are not possible - and hence, never go to the same target path. In this case, isibackup must always refer to the actual time stamp of the latest incremental backup (or full backup, if that's newer). So if you would like a time element in your backup target path, remember to include the flag "REFER_TO_LATEST_STAMP=true" in your configuration file. </listitem></itemizedlist><para/></section></section><section><title>Invocation</title><para>By default the isibackup package installs a crontab in <code>/etc/cron.d/isibackup</code> with this content: </para><screen><![CDATA[# data
0 3 1 * * root isibackup --full --backup --set data
59 19 * * * root isibackup --incr --backup --set data

# config
30 2 1 * * root isibackup --full --backup --set config
30 2 * * * root isibackup --incr --backup --set config

# system
30 3 2 * * root isibackup --full --backup --set system
30 3 * * * root isibackup --diff --backup --set system

# remove old differential backups (i.e. as soon as there is a newer full and at least one newer diff)
0 5 3 * * root deleteolddiffbackups -f

# clean differential backups as long as available space is less then 95%, but spare the 10 freshest ones
# this cleans differential and incremental backups, but not full backups!
6 5 * * * root cleanbackups -s 95 -m 10
]]></screen><para>This creates </para><itemizedlist><listitem>a full backup of all data files once a month </listitem><listitem>an incremental backup of all data files every day,  </listitem><listitem>a full backup of all configuration files once a month </listitem><listitem>an incremental backup of all configuration files once a day, resulting in a set of config file changes  </listitem><listitem>a full backup of all system files once a day </listitem><listitem>a differential backup of all system files once a day, resulting in a (hopefully) slowly increasing set of system file backups since the last full backup. After a month, the system backup is remade as full backup. </listitem></itemizedlist><para>Additionally,  </para><itemizedlist><listitem><para>As soon as a new full backup has been created, the diffs for the previous backup are of little value. The <code>deleteolddiffbackups</code> script deletes these old differential backups once a month, but only after at least one new differential backup has been created. </para></listitem><listitem><para>we make sure that the disk is not filled with old, uninteresting differential backups. Usually, only the last differential backup is interesting, so keeping older ones is only relevant if you think you might need an older version of a file. Otherwise, it just uses up space. So, with <code>cleanbackups</code> we make sure that we delete each backup which is not among the last 10 (deafult), but only if disk space is more than 95% used (default). </para></listitem></itemizedlist><para>This process has been improved from an earlier version, preventing these shortcomings: </para><itemizedlist><listitem>Configuration files could not be recovered as there were only full backups; a change overwrote an older version within a day. </listitem><listitem>Full system backups once a day were not necessary </listitem><listitem>Differential backups grow in size each day. As we stored them in separate directories, each day a larger set of files had to be transferred. It was much more elegant to  <itemizedlist><listitem>either use incremental backups, that is, only backup files that have changed since the last incremental backup (and not all that have changed since the last full backup),  </listitem><listitem>or to store the differential backups in one place, so that only the differences to the differential backup need to be transferred - but which, as a downside, does not allow the recovery of files older than a day. </listitem></itemizedlist></listitem></itemizedlist><para/></section><section><title>Backup properties</title><itemizedlist><listitem>Backups are file-oriented. ISiBackup creates a packed, crypted file for each directory having been backed up. </listitem><listitem><para>The result is stored locally in the <emphasis role='strong'>ISiBackup Target Root Directory</emphasis> below <code>/var/backups/isibackup</code> (default). </para></listitem><listitem><para>Full backups are stored below the Target Root in <code>full/&lt;network name>/&lt;hostname></code>. This is called the <emphasis role='strong'>ISiBackup Target Directory</emphasis>. </para></listitem><listitem>When there is a pre-existing full backup in the target directory, e.g. when the previous month's backup has not been deleted, that previous backup is updated. During this update, all crypted files containing changed directories are generated anew. All other files remain the same. This speeds up backup creation. </listitem><listitem><para>ISiBackup records the date of the last full backup (and further log information) in a file called <code>&lt;hostname>-full</code>, stored in the ISiBackup State Directory <code>/var/backups/isibackup/state/</code>. </para></listitem><listitem><para>Differentials backup are stored below the above path in <code>diff/&lt;date>/&lt;network name>/&lt;hostname></code> (default). This backups all files that have been changed since the last full backup (the date of which is determined from the above file). As differential backups go to backups by date, they are not updated, but for each day at most one new directory is created (unless you execute the diff backup command more than once a day). </para></listitem><listitem><para>The set of backed up files is always the <code>data</code>, <code>system</code>, or <code>config</code> set, that is, each file on the system in one of these sets. </para></listitem><listitem><para>Exclusions from that list are in <code>/etc/isibackup/{data,system,config}/exclude_dirs.lst</code>, and this usually contains at least <code>/var/cache/apt</code>, <code>/var/spool/squid</code>, <code>/tmp</code>, <code>/var/tmp</code> and <code>/var/backups/isibackup</code> itself in one of the three sets. </para></listitem><listitem>The normal include pattern is to backup all locally mountable non-network filesystems. On some systems this has been changed to inclusion of specific directories. </listitem><listitem>It is also possible to exclude individual files and include individual files or directories. This is used on some systems, but not a default. </listitem><listitem><para>Backup files on all hosts should belong to user:group <code>backup:backup</code> and should have permissions 660 (files) or 770 (directories).  </para></listitem></itemizedlist><para/></section><section><title>File Formats</title><para/><section><title>Stamp Files</title><itemizedlist><listitem>Stamp files are used to record the date of backup executions. </listitem><listitem><para>The default name of backup stamp files used to be &lt;hostname>-&lt;set>&lt;mode>backup.date. </para></listitem><listitem><para>The new name is &lt;hostname>.&lt;network name>-&lt;set>-&lt;mode>.date. There will be symlinks to maintain backward compatibility. </para></listitem><listitem>The stamp files are written to the state dir. </listitem><listitem>Older stamp files contain the date of the day when the backup was started. </listitem><listitem>Newer stamp files contain the date and time when the backup was started. </listitem><listitem>The stamp file is written when the backup has successfully terminated. </listitem><listitem>diff backups did not usually create a stamp file, but do so now. This eases determination of when the last backup run of a specific mode and set was executed on a host. </listitem></itemizedlist><para/></section><section><title>Statelog (state/&lt;hostname>.&lt;netname>.log)</title><itemizedlist><listitem>This file records the isibackup executions for, respectively on, a specific host. </listitem><listitem>It contains a series of fields, separated by commas (,) </listitem><listitem>Each field may be an array of several fields, separated from each other by a semicolon (;) </listitem><listitem>Fields containing quotes must escape the quote with a backslash (\" instead of ") </listitem><listitem>Fields containing a newline must replace the newline with \n (this should rarely happen) </listitem><listitem>Backslashes must be escaped, too (\\ instead of \) </listitem><listitem>Fields containing commas or semicolons must be surrounded by quotes (").  </listitem><listitem>Whitespace or other characters cannot be escaped by using "\ ". </listitem><listitem>Field contents: </listitem></itemizedlist><table><caption/><tgroup cols='5'><colspec colname='xxx1'/><colspec colname='xxx2'/><colspec colname='xxx3'/><colspec colname='xxx4'/><colspec colname='xxx5'/><tbody><row><entry><para> <emphasis role='strong'>Number</emphasis> </para></entry><entry><para> <emphasis role='strong'>Name</emphasis> </para></entry><entry><para> <emphasis role='strong'>Field Format</emphasis> </para></entry><entry><para> <emphasis role='strong'>Description</emphasis> </para></entry><entry><para> <emphasis role='strong'>Example</emphasis> </para></entry></row><row><entry><para> 1 </para></entry><entry><para> ISiBackup Execution Start Time </para></entry><entry><para> YYYY-mm-dd HH:MM:SS </para></entry><entry><para> Date and Time when isibackup execution was started. This is written at the start of the program by the program itself. </para></entry><entry><para> 2007-06-07 15:31:10 </para></entry></row><row><entry><para> 2 </para></entry><entry><para> ISiBackup Execution End Time </para></entry><entry><para> YYYY-mm-dd HH:MM:SS </para></entry><entry><para> Date and Time when isibackup execution ended. This is written at the end of the program by the program iself. </para></entry><entry><para> 2007-06-07 22:11:15 </para></entry></row><row><entry><para> 3 </para></entry><entry><para> Backup command </para></entry><entry><para> BACKUP|COLLECT|COLLECT_STATE|COLLECT_DATA|COPY|... </para></entry><entry><para> isibackup command from command line, indicating the main function being asked from isibackup </para></entry><entry><para> BACKUP </para></entry></row><row><entry><para> 4 </para></entry><entry><para> Backup Set Name </para></entry><entry><para> name of configuration set, e.g. config|data|system|... </para></entry><entry><para> Name of the set to be backed of or collected etc.; corresponds to the /etc/isibackup/&lt;set name> directory name </para></entry><entry><para> config </para></entry></row><row><entry><para> 5 </para></entry><entry><para> Backup Mode </para></entry><entry><para> diff|full|incr </para></entry></row><row><entry><para> 6 </para></entry><entry><para> Collector and Packer </para></entry><entry><para> &lt;file extension of collector / packer program> </para></entry><entry><para> ISIbackup uses colltion (storing several files in one) and packing; this is the resulting file extension, indicating the name of the program having been used to collect and pack the  files </para></entry><entry><para> cpio.bz2|tar.gz|zip|... </para></entry></row><row><entry><para> 7 </para></entry><entry><para> Crypter </para></entry><entry><para> &lt;file extension of encryption program> </para></entry><entry><para> ISIBackup uses encryption to prevent reading of the backed up files; this is the resulting file extension, indicating the name of the program having been used to encrypt the files. </para></entry><entry><para> gpg|pgp|... </para></entry></row><row><entry><para> 8 </para></entry><entry><para> Total Dirs </para></entry><entry><para> &lt;integer> </para></entry><entry><para> Total number of directories that isibackup has worked on during this backup proceess (after filtering) </para></entry><entry><para> 800 </para></entry></row><row><entry><para> 9 </para></entry><entry><para> Total number of input files </para></entry><entry><para> &lt;integer> </para></entry><entry><para> Total number of files that isibackup has looked at when backing up. This means "having been backed up" when there was no backup in the target directory, and "checked if renewed backup is necessary, if so: having been backed up" when there was a backup in the target directory. </para></entry><entry><para> 1000 </para></entry></row><row><entry><para> 10 </para></entry><entry><para> Total input size </para></entry><entry><para> &lt;integer> </para></entry><entry><para> Total size of files having been looked at when backing up, in KB (after filtering), and for which isibackup was cable opf backing up (suitable collector / packer) </para></entry><entry><para> 100 </para></entry></row><row><entry><para> 11 </para></entry><entry><para> Total number of output files </para></entry><entry><para> &lt;integer> </para></entry><entry><para> Total number of files that isibackup has created including those checked in the target directory if there was a backup in the target directory </para></entry><entry><para> 500 </para></entry></row><row><entry><para> 12 </para></entry><entry><para> Total output size </para></entry><entry><para> &lt;integer> </para></entry><entry><para> Total size of output files having been created by isibackup including those checked in the target directory if there was a backup in the target directory, in KB  </para></entry><entry><para> 50 </para></entry></row><row><entry><para> 13 </para></entry><entry><para> Backup Program Version </para></entry><entry><para> x.yy.zz </para></entry><entry><para> Internal Program version of isibackup </para></entry><entry><para> 1.4.33 </para></entry></row><row><entry><para> 14 </para></entry><entry><para> Host Name </para></entry><entry><para> &lt;hostname> </para></entry><entry><para> hostname of system executing backup as </para></entry><entry><para> $(hostname) </para></entry></row><row><entry><para> 15 </para></entry><entry><para> Domain Name </para></entry><entry><para> &lt;domainname </para></entry><entry><para> domain name of system executing backup </para></entry><entry><para> $(hostname -d) </para></entry></row><row><entry><para> 16 </para></entry><entry><para> <ulink url='/CryptKey'>CryptKey</ulink> IDs </para></entry><entry><para> 0123456789ABCDEF[;0123546789ABCDEF[;...]] </para></entry><entry><para> List of IDs used for encryption of backup files </para></entry><entry><para> ABCD54290495602A </para></entry></row><row><entry><para> 17 </para></entry><entry><para> <ulink url='/CryptKeyNames'>CryptKeyNames</ulink> </para></entry><entry><para> &lt;name>[;&lt;name>[;...]] </para></entry><entry><para> List of Names of Keys used for encryption </para></entry><entry><para> Client KapoZH Backup (Logintas 2006) &lt;<ulink url='mailto:clikapozh-backup@logintas.ch'>clikapozh-backup@logintas.ch</ulink>> </para></entry></row><row><entry><para> 18 </para></entry><entry><para> Target Directory of backup </para></entry></row><row><entry><para> 19 </para></entry><entry><para> Result </para></entry><entry><para> started|completed|completed_with_errors|aborted_by_user|aborted_by_error </para></entry><entry><para> Termination condition of isibackup execution. There should be two statelog lines for each successful run: one with "started" and one with any os the other result codes. If there is only one line, CRON has worked, but isibackup was aborted wihtout having been able to write into the statelog file. </para></entry><entry><para> started </para></entry></row></tbody></tgroup></table><para/></section></section><section><title>Logging and statistics</title><itemizedlist><listitem><para>Each individual backup run creates statistics of when the backup started and ended, how many files and bytes where backuped, how much of that was left after compression and some more information. This information is stored in a backup log file called <code>/var/backups/isibackup/state/&lt;hostname>.&lt;network name>.log</code>. </para></listitem><listitem><para>The tool <code>isibus</code> shows a local usage of backup directories. <code>isibus</code> may take long to run, as it is based on <code>du</code>. </para></listitem></itemizedlist><para/><section><title>Backup Run Logging</title><itemizedlist><listitem><para>Each individual run of ISiBackup generates a log entry in <code>/var/backups/isibackup/state/&lt;fqhn>.log</code> </para><itemizedlist><listitem>Currently, only successful runs log here </listitem><listitem>Intended: Also partially succesful runs should log here (state "completed with errors") as well as failed runs (state "not completed (errors)") </listitem></itemizedlist></listitem><listitem>Each individual run of ISiBackup also generates a set of files describing the content of the backup. These are stored  <itemizedlist><listitem><para>in the backups' target directory below <code>/var/backups/isibackup/&lt;mode>/&lt;network name>/&lt;hostname>/&lt;set>/isibackup</code> </para></listitem><listitem><para>in the systems log directory below <code>/var/log/isibackup</code> </para></listitem></itemizedlist></listitem><listitem>The current content of these files will not be described here. The intended structure is: <itemizedlist><listitem><para>all logs go into a subdirectory of the backup target directory called <code>isibackup-&lt;backup start date as YYYY-MM-DD-HH-MM-SS>/</code>. There we have: </para><itemizedlist><listitem><para><code>content.log</code>: a full list of files and directories included in the backup, each with full path, with file modification date, and input size; the directories having an additional output size (size of the packed archive) </para></listitem><listitem><para><code>include_dirs.lst</code>: The original set of directories to be included </para></listitem><listitem><para><code>include_dirs.log</code>: The resulting set of directories to be been included in the backup (top-level after fstab read, but before filtering) </para></listitem><listitem><para><code>included_dirs.log</code>: The resulting set of directories having been included in the backup (after filtering) </para></listitem><listitem><para><code>error.log</code>: a collection of all error messages from the backup run </para></listitem><listitem><para><code>isibackup.log</code>: a copy of the console output, but without control characters (no \r) </para></listitem><listitem><para><code>skipped.log</code>: a list of directories and files not included in the backup (i.e. having been filtered out by exclusions) </para></listitem><listitem><para>a copy of  <code>exclude_dirs.lst</code>, <code>exclude_files.lst</code>, <code>include_dirs.lst</code>, <code>include_files.lst</code> </para></listitem></itemizedlist></listitem></itemizedlist></listitem></itemizedlist><para>the general log entry from above should also be saved here (as a copy moving with the backup) </para><para/></section></section><section><title>Restore</title><para>The restore of each individual file can be done completely without !ISiBackup, as the backup is just a collection of encryted, packed, collected directory contents. So assuming you have  </para><itemizedlist><listitem>the decrypter, usually gnupg and the private key used for the backup, </listitem><listitem>the depacker, usually bunzip2, and </listitem><listitem>the decollector, usually cpio </listitem></itemizedlist><para>you can restore each file individually. </para><para>To automate the process, there is a tool called <code>isirestore</code> which must be given source and target directories.  </para><para/></section><section><title>Shortcomings and pending issues</title><itemizedlist><listitem>Complicated sets... this has partially been resolved by having split up sets in data, config and system sets. </listitem><listitem>Ever growing backup sets: Files get backed up per directory. When a directory vanishes from the original, it stays in the backup. Even vanished files stay in the backup as long as no other file in the respective directory changes. </listitem><listitem>ISiRestore currently has the downside of storing the decryption password in the environment, but that's pending to be resolved. </listitem><listitem>As soon as external users would supply backups (or we fetch them there or whatever), a web frontend would be nice. Specification to come. </listitem><listitem>Although file contents are encrypted, directory names are not. This allows a thrid party to get some insight of the files having been backed up (i.e. customer's names if directories are called like customers) if he can lay hand on the backup. </listitem><listitem>From the backup target, all empty directories should be removed (this is an option defaulting to on). This does not work correctly if the backup directory has been dynamically mounted. </listitem><listitem>ISiBackup tends to need huge temporary directories as the various steps (collection, packing, encryption) are not done in direct sequence to each other, but as each of them uses an intermediate file. A much better solution would be to use direct command piping, which should be possible whenever the commands employed support that. </listitem><listitem><para>Sometimes (or frequently), isibackup forgets temporary files it has created, which use up disk space (especially on <code>/var/tmp</code> which is not cleaned on boot-up. </para></listitem></itemizedlist><para/><section><title>FULL and DIFF mode</title><itemizedlist><listitem>FULL and DIFF mode should not miss any files. </listitem><listitem>TODO: Check if the dates of the archive files are set properly. E.g. to the date of the newest file in the archive, not to when the archiv </listitem></itemizedlist><para>e was created. </para><para/></section><section><title>INCR mode</title><itemizedlist><listitem>Stamp files are set to the date, when the backup started. Files created during backup will be backed up the next day. It's possible that s </listitem></itemizedlist><para>uch a file gets backed up today and tomorrow, but that should not harm. </para><itemizedlist><listitem>If multiple incremental backups take place at one day, the stamp (date and time) of the last backup before that day is taken as reference </listitem></itemizedlist><para>each run. So it's not possible losing files by overwriting archives. </para></section></section></article>